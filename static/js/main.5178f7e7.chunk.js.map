{"version":3,"sources":["Containers/ImageBrowser/ImageBrowser.module.css","Containers/CropAndUpload/CropUpload.module.css","Components/ResizedPicture/ResizedPicture.module.css","Components/OutputLinks/OutputLinks.module.css","Components/Button/Button.module.css","Components/Button/Button.js","Components/ResizedPicture/resizedPicture.js","Components/Modal/Modal.js","Containers/ImageBrowser/ImageBrowser.js","Constants.js","Utilities/getCroppedImage.js","Utilities/uploadImage.js","Utilities/dataURItoBlob.js","Components/OutputLinks/outputLinks.js","Containers/CropAndUpload/CropUpload.js","Containers/App/App.js","serviceWorker.js","Store/rootReducer.js","index.js","Components/Modal/Modal.module.css"],"names":["module","exports","Button","props","onClick","className","classes","button","name","React","memo","canvasref","useRef","src","height","width","savesrc","useEffect","ctx","current","getContext","clearRect","img","Image","onload","e","drawImage","Math","max","dataImg","toDataURL","call","ResizedPicture","canvasbox","ref","specs","Modal","activeclass","active","backdrop","modal","modalHeader","heading","modalBody","children","modalFooter","onCancel","ImageBrowser","state","error","errorMsg","inputRef","createRef","onFileChangeHandler","evt","type","target","files","value","defaultValue","setState","reader","FileReader","ev","result","image","store","setSrc","readAsDataURL","outputImageHandler","data","index","outputimages","findIndex","el","setOutputSrc","cropAndUploadHandler","history","push","onCancelHandler","uploadbutton","this","buttonBox","Applogo","onChange","accept","input","results","map","key","Component","connect","dispatch","withRouter","getCroppedImg","crop","a","canvas","document","createElement","Promise","resolve","scaleX","naturalWidth","scaleY","naturalHeight","x","y","config","headers","uploadImage","imageobject","blob","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","length","i","charCodeAt","Blob","dataURItoBlob","formData","FormData","forms","append","Axios","post","OutputLinks","outputlinks","label","href","link","rel","CropUpload","outputLinks","onCropComplete","dataimg","setCropHandler","oldcrop","initial","setInitial","setCrop","uploadHandler","all","then","res","catch","err","ind","url","cropContainer","cropBox","reactcrop","newcrop","locked","uploadBox","App","to","path","component","PureComponent","Boolean","window","location","hostname","match","initialstore","unit","updateSrc","arr","updatedarr","updateCrop","updateInitial","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","action","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5178f7e7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgg\":\"ImageBrowser_imgg__2P7E6\",\"results\":\"ImageBrowser_results__2dVoj\",\"input\":\"ImageBrowser_input__t11AZ\",\"Applogo\":\"ImageBrowser_Applogo__3nkTv\",\"buttonBox\":\"ImageBrowser_buttonBox__OkVme\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cropContainer\":\"CropUpload_cropContainer__3KRVk\",\"cropBox\":\"CropUpload_cropBox__3Yzsj\",\"uploadBox\":\"CropUpload_uploadBox__16Zx1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResizedPicture\":\"ResizedPicture_ResizedPicture__whAKW\",\"canvasbox\":\"ResizedPicture_canvasbox__rZKaU\",\"specs\":\"ResizedPicture_specs__zP7Hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outputlinks\":\"OutputLinks_outputlinks__2uFKV\",\"label\":\"OutputLinks_label__2uu6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__j0YmJ\"};","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\n\r\n// This is the styled button component \r\nconst Button = (props)=>{\r\nreturn (<button onClick={props.onClick} className={classes.button}>{props.name}</button>)\r\n}\r\n\r\nexport default Button;","import React,{useEffect,useRef} from 'react';\r\nimport *  as constants from '../../Constants';\r\nimport classes from './ResizedPicture.module.css';\r\n\r\n\r\n// This component is a card shown on browse screen\r\nconst ResizedPicture = (props)=>{\r\n\r\n    let canvasref = useRef();\r\n\r\n    let {src,height,width,savesrc} = props;\r\n\r\n    // this useEffect is used to generate canvas image of required resolutions\r\nuseEffect(()=>{\r\n    let ctx = canvasref.current.getContext('2d');\r\n    ctx.clearRect(0,0,width,height);\r\n    let img = new Image();\r\n      img.src = src\r\n        img.onload = (e)=>{\r\n            ctx.drawImage(img,(Math.max(0,((+constants.IMAGE_WIDTH)-(+width))/2)),Math.max(0,((+constants.IMAGE_HEIGHT)-(+height))/2),(+width),(+height),0,0,(+width),(+height));\r\n        var dataImg = canvasref.current.toDataURL();\r\n            savesrc.call(this,dataImg);\r\n        }  \r\n},[src,height,width,savesrc])\r\n\r\nreturn(<div className={classes.ResizedPicture}>\r\n    <div className={classes.canvasbox}><canvas ref={canvasref} width={props.width} height={props.height}> </canvas></div><div className={classes.specs}><h3>{props.name}</h3>\r\n<div><strong>{props.width} X {props.height}</strong></div></div></div>)\r\n\r\n\r\n}\r\n\r\nexport default React.memo(ResizedPicture);","import React from 'react';\r\nimport classes from './Modal.module.css';\r\nimport Button from '../../Components/Button/Button';\r\n\r\n\r\n// This is a modal component with black backdrop and white modal controlled through active prop having boolean value\r\nconst Modal =(props)=>{\r\n\r\n     let activeclass = '';\r\n\r\n     if(props.active)\r\n     {\r\n         activeclass = classes.active;\r\n     }\r\n\r\n    return (<>\r\n    <div className={classes.backdrop+' '+ activeclass}></div>\r\n    <div className={classes.modal +' '+ activeclass}>\r\n       <div className={classes.modalHeader}><div>{props.heading?props.heading:'Info'}</div></div>\r\n       <div className={classes.modalBody}>{props.children}</div>\r\n       <div className={classes.modalFooter}><Button name=\"Cancel\" onClick={props.onCancel}/></div>\r\n    </div>\r\n    </>)\r\n\r\n}\r\n\r\nexport default Modal;","import React from 'react';\r\nimport classes from './ImageBrowser.module.css';\r\nimport Button from '../../Components/Button/Button';\r\nimport * as constants from '../../Constants';\r\nimport ResizedPicture from '../../Components/ResizedPicture/resizedPicture';\r\nimport {withRouter} from 'react-router-dom';\r\nimport {connect} from 'react-redux'; \r\nimport Modal from '../../Components/Modal/Modal';\r\n\r\n// This component is used to browse the image and generate the output images with resolution\r\nclass ImageBrowser extends React.Component\r\n{\r\n   // state to manage error and modal\r\n  state={\r\n    error:false,\r\n    errorMsg:''\r\n  }\r\n      \r\n  // ref to input field\r\n   inputRef = React.createRef();\r\n    \r\n    // Triggered whenever the new file is browsed\r\n      onFileChangeHandler=(evt)=>{\r\n         let type = evt.target.files[0].type;\r\n         if(!(type===\"image/png\" || type===\"image/jpeg\" || type===\"image/JPG\"))\r\n         {\r\n           \r\n          this.inputRef.current.value = this.inputRef.current.defaultValue;\r\n          this.setState({\r\n            error:true,\r\n            errorMsg:'Please upload the image file with png or jpeg format'\r\n          })\r\n         }\r\n         else{\r\n          let reader = new FileReader();\r\n          reader.onload = (ev)=>{\r\n            if(ev.target.result)\r\n            {\r\n            let image = new Image()\r\n            image.src = ev.target.result;\r\n            image.onload = (e)=>{\r\n              if(image.height!==1024 && image.width!==1024)\r\n              {\r\n                   this.inputRef.current.value = this.inputRef.current.defaultValue;\r\n                   this.setState({\r\n                     error:true,\r\n                     errorMsg:'Please upload the image with resolution 1024 X 1024'\r\n                   })\r\n              }\r\n              else if(this.props.store.src!==image.src)\r\n              {\r\n             this.props.setSrc(image.src)\r\n            }}\r\n          }\r\n          }\r\n          if(evt.target.files[0])\r\n          reader.readAsDataURL(evt.target.files[0]);\r\n         }\r\n      }\r\n\r\n      // Triggered when image is loaded, used to set the source of output images\r\n      outputImageHandler=(name,data)=>{\r\n        let index = this.props.store.outputimages.findIndex(el=>el.name===name);\r\n          if(this.props.store.outputimages[index]['src']!==data)\r\n          this.props.setOutputSrc(name,data);\r\n      }\r\n\r\n      // triggered when clicked on crop and upload, will route to next page\r\n      cropAndUploadHandler=()=>\r\n      {\r\n         this.props.history.push('/crop_and_upload');\r\n      }\r\n    \r\n      //this method is triggered when cancel button of modal is clicked\r\n      onCancelHandler=()=>{\r\n        this.setState({\r\n          error:false\r\n        })\r\n      }\r\n    \r\n    \r\n      render()\r\n      {\r\n        let uploadbutton = null;\r\n        let modal = null;\r\n          \r\n          if(this.props.store.src)\r\n          { \r\n            uploadbutton = <div className={classes.buttonBox}><Button name=\"Set Crop and Upload\" onClick={this.cropAndUploadHandler}/></div>\r\n          }\r\n\r\n          if(this.state.error)\r\n          {\r\n          modal=<Modal active={this.state.error} onCancel={this.onCancelHandler} heading=\"oops...error occurred\">{this.state.errorMsg}</Modal>\r\n          }\r\n    \r\n    return (<div>\r\n      {modal}\r\n      <h2 className={classes.Applogo}>IMAGE SIZE CONVERTER</h2>\r\n       <input type=\"file\" ref={this.inputRef} onChange={this.onFileChangeHandler} accept=\"image/png,image/jpeg\"  className={classes.input}/>\r\n       <div className={classes.results}>\r\n      {this.props.store.src?this.props.store.outputimages.map(el=>{\r\n        return <ResizedPicture key={el.name} name={el.name} src={this.props.store.src} width={el.width} height={el.height} savesrc={(data)=>this.outputImageHandler(el.name,data)}/>\r\n      }):null}</div>\r\n      {uploadbutton}\r\n      </div>)\r\n    }\r\n}\r\n\r\n\r\n// mapping redux store with props\r\nconst mapStoreWithProps = (state)=>{\r\n return{store:state}\r\n}\r\n\r\n // mapping redux action dispatcher with props\r\nconst mapActionsWithProps = (dispatch)=>{\r\n  return {\r\n    setSrc : (src)=>dispatch({type:constants.SET_SRC,src}),\r\n    setOutputSrc : (name,src)=>dispatch({type:constants.SET_OUTPUTSRC,name,src})\r\n  }\r\n}\r\n\r\nexport default connect(mapStoreWithProps,mapActionsWithProps)(withRouter(ImageBrowser));","// This file holds the constants and configuration constants of the app\r\n\r\n\r\nexport  const IMAGE_HEIGHT = '1024';\r\nexport const IMAGE_WIDTH = '1024';\r\n\r\nexport const OUTPUT_VERTICAL_WIDTH = '365';\r\nexport const OUTPUT_VERTICAL_HEIGHT = '450';\r\n\r\nexport const OUTPUT_HORIZONTAL_WIDTH = '755';\r\nexport const OUTPUT_HORIZONTAL_HEIGHT = '450';\r\n\r\nexport const OUTPUT_HORIZONTAL_SMALL_WIDTH = '365';\r\nexport const OUTPUT_HORIZONTAL_SMALL_HEIGHT = '212';\r\n\r\nexport const OUTPUT_GALLERY_WIDTH = '380';\r\nexport const OUTPUT_GALLERY_HEIGHT = '380';\r\n\r\n\r\n/* --------------------------------  ACTION TYPES -------------------------------------------------*/\r\n\r\nexport const SET_SRC = 'set_source';\r\nexport const SET_OUTPUTSRC = 'set_output';\r\nexport const SET_CROP = 'set_crop';\r\nexport const SET_INITIAL = 'set_initial';","\r\n\r\n// utility function to generate promise for cropped DataURL\r\nexport const getCroppedImg = async (src, crop)=> {\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    let img = new Image();\r\n    img.src = src\r\n    return new Promise(resolve => {\r\n      img.onload =  ()=> {\r\n            ctx.drawImage(img, 10, 10, 200, 180);\r\n            const scaleX = img.naturalWidth / img.width;\r\n        const scaleY = img.naturalHeight / img.height;\r\n        canvas.width = crop.width;\r\n        canvas.height = crop.height;\r\n          ctx.drawImage(img, crop.x * scaleX,\r\n            crop.y * scaleY,\r\n            crop.width * scaleX,\r\n            crop.height * scaleY,\r\n            0,\r\n            0,\r\n            crop.width,\r\n            crop.height);\r\n            resolve(canvas.toDataURL());\r\n         }\r\n\r\n});\r\n}","import Axios from 'axios';\r\nimport {dataURItoBlob} from './dataURItoBlob';\r\n\r\n\r\n\r\nconst  config = {\r\n    headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        'X-Requested-With': 'XMLHttpRequest'\r\n    }\r\n  };\r\n\r\n  const key = '43722a73c015bc4b8ce7731bf136bdb6';\r\n\r\n\r\n  // utility function to upload image to hosting\r\nexport const  uploadImage =(imageobject)=>{\r\n    let imgdata = imageobject['src'];\r\n    let blob = dataURItoBlob(imgdata);\r\n    let formData = new FormData(document.forms[0]);\r\n   formData.append('image', blob);\r\n   return Axios.post(`https://cors-anywhere.herokuapp.com/https://api.imgbb.com/1/upload?key=${key}`,formData,config)\r\n}","// utility function to convert dataURI to blob\r\nexport const dataURItoBlob = (dataURI) => {\r\n    \r\n    let byteString;\r\n    if (dataURI.split(',')[0].indexOf('base64') >= 0)\r\n        byteString = atob(dataURI.split(',')[1]);\r\n    else\r\n        byteString = unescape(dataURI.split(',')[1]);\r\n\r\n    let mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\r\n\r\n\r\n    let ia = new Uint8Array(byteString.length);\r\n    for (let i = 0; i < byteString.length; i++) {\r\n        ia[i] = byteString.charCodeAt(i);\r\n    }\r\n\r\n    return new Blob([ia], {type:mimeString});\r\n}","import React from 'react';\r\nimport classes from './OutputLinks.module.css';\r\n\r\n// This component is used to display the final links \r\nconst OutputLinks =(props)=>{\r\n    return (<div className={classes.outputlinks}>\r\n        <h2 className={classes.label}>{props.label}: {props.width}X{props.height}</h2>\r\n    <div><span><strong>Link : </strong></span><a href={props.link} rel=\"noreferrer\" target=\"_blank\">{props.link}</a></div>\r\n    </div>)\r\n}\r\n\r\nexport default OutputLinks","import React from 'react';\r\nimport ReactCrop from 'react-image-crop';\r\nimport * as constants from '../../Constants';\r\nimport {connect} from 'react-redux';\r\nimport 'react-image-crop/dist/ReactCrop.css';\r\nimport classes from './CropUpload.module.css';\r\nimport {getCroppedImg} from '../../Utilities/getCroppedImage';\r\nimport Button from '../../Components/Button/Button';\r\nimport Modal from '../../Components/Modal/Modal';\r\nimport {uploadImage} from '../../Utilities/uploadImage';\r\nimport OutputLinks from '../../Components/OutputLinks/outputLinks';\r\n\r\n\r\n// This component is used to set the portion of crop and upload the images\r\nclass CropUpload extends React.Component\r\n{\r\n    // state for modal visibility and outputLinks \r\n    state={\r\n        modal:false,\r\n        errorMsg:'',\r\n        outputLinks :[]\r\n    }\r\n\r\n// this method is trigged when the crop is complete and generate the new src for the image\r\n    onCropComplete= async(name,crop)=>{\r\n       let dataimg =  await getCroppedImg(this.props.store.src,crop);\r\n       this.props.setOutputSrc(name,dataimg);\r\n    }\r\n     \r\n   \r\n    // this method is triggered whenever we are moving the crop\r\n    setCropHandler = (name,crop)=>{\r\n        let index = this.props.store.outputimages.findIndex(el=>el.name===name);\r\n        let oldcrop = this.props.store.outputimages[index].crop;\r\n        if(crop.x !== oldcrop.x || crop.y !==oldcrop.y || !this.props.store.outputimages[index].initial)\r\n        {\r\n           this.props.setInitial(name,true);\r\n           this.props.setCrop(name,crop);\r\n           this.onCropComplete(name,crop);\r\n        }\r\n    }   \r\n\r\n  \r\n\r\n// this method is triggered when we click on the upload button\r\n    uploadHandler=()=>{\r\n        this.setState({\r\n            modal:true \r\n        })\r\n        Promise.all(this.props.store.outputimages.map(el=>{\r\n            return uploadImage(el) // upload image is present in utilities folder takes care of async upload of pic\r\n             })).then(res=>{\r\n               this.setState({\r\n                   outputLinks:res\r\n               })\r\n        }).catch(err=>{\r\n            this.setState({\r\n                modal:true,\r\n                errorMsg:'there is some network error. Please try again'\r\n            })\r\n        })\r\n    }\r\n\r\n    // this method is triggered when cancel button of modal is clicked\r\n    onCancelHandler=()=>{\r\n        this.setState({\r\n            modal:false,\r\n            errorMsg:''\r\n        })\r\n    }\r\n\r\n\r\nrender()\r\n{\r\n    let modal=null;\r\n\r\n  // when modal is in processing state\r\n   if(this.state.modal)\r\n   {\r\n    modal =  <Modal active={this.state.modal} onCancel={this.onCancelHandler}><p>Please wait your request has been processing.....</p></Modal>\r\n   }\r\n\r\n // when modal will show error\r\n    if(this.state.modal && this.state.errorMsg)\r\n    {\r\n    modal = <Modal active={this.state.modal} onCancel={this.onCancelHandler}>{this.state.errorMsg}</Modal>\r\n    }\r\n\r\n // when modal will show result\r\n    if(this.state.outputLinks.length)\r\n    {\r\n    modal = <Modal active={this.state.modal} onCancel={this.onCancelHandler}>\r\n        {this.state.outputLinks.map((el,ind)=>(<OutputLinks link={el.data.data.url} \r\n                                                            label={this.props.store.outputimages[ind].name} height={this.props.store.outputimages[ind].height} width={this.props.store.outputimages[ind].width}/>))}\r\n        </Modal>\r\n    }\r\n\r\n\r\n\r\n\r\n    return(<>\r\n    {modal}\r\n    <div className={classes.cropContainer}>\r\n        {this.props.store.outputimages.map(el=>{\r\n            return (<div className={classes.cropBox} key={el.name}>\r\n                    <h3>{el.name}</h3>\r\n                    <ReactCrop src={this.props.store.src} \r\n                           crop={el.crop} \r\n                           className={classes.reactcrop} \r\n                           onChange = {(newcrop)=>this.setCropHandler(el.name,newcrop)} \r\n                           locked/>\r\n                </div> )\r\n        })}\r\n        <div className={classes.uploadBox}>\r\n            <Button name=\"Upload\" onClick={this.uploadHandler}/>\r\n        </div>\r\n        </div></>)\r\n}\r\n}\r\n\r\n\r\n\r\n// mapping redux store with props\r\nconst mapStoreWithProps = (state)=>{\r\n    return{store:state}\r\n   }\r\n   \r\n   // mapping redux action dispatcher with props\r\nconst mapActionsWithProps = (dispatch)=>{\r\n     return {\r\n       setSrc : (src)=>dispatch({type:constants.SET_SRC,src}),\r\n       setOutputSrc : (name,src)=>dispatch({type:constants.SET_OUTPUTSRC,name,src}),\r\n       setCrop :(name,crop)=>dispatch({type:constants.SET_CROP,name,crop}),\r\n       setInitial:(name,initial)=>dispatch({type:constants.SET_INITIAL,name,initial})\r\n     }\r\n   }\r\n   \r\n   export default connect(mapStoreWithProps,mapActionsWithProps)(CropUpload);","import React from 'react';\nimport ImageBrowser from '../ImageBrowser/ImageBrowser';\nimport {Route,Redirect} from 'react-router-dom';\nimport CropUpload from '../CropAndUpload/CropUpload';\n\n\n// This is the root component of the app \nclass App extends React.PureComponent\n{\n render()\n {\n   return (<>\n   <Redirect to='/app'/>     \n  <Route path=\"/app\" component={ImageBrowser}/>\n  <Route path=\"/crop_and_upload\" component={CropUpload}/>\n   </>)\n }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as constants from '../Constants';\r\n\r\n\r\n// initial root store of the app\r\nconst initialstore = {\r\n        src: null,\r\n        outputimages: [{\r\n                name: 'horizontal',\r\n                height: constants.OUTPUT_HORIZONTAL_HEIGHT,\r\n                width: constants.OUTPUT_HORIZONTAL_WIDTH,\r\n                src: null,\r\n                initial:false,\r\n                crop: {\r\n                    unit: 'px',\r\n                    x: Math.max(0, ((+constants.IMAGE_WIDTH) - (+constants.OUTPUT_HORIZONTAL_WIDTH)) / 2),\r\n                    y: Math.max(0, ((+constants.IMAGE_HEIGHT) - (+constants.OUTPUT_HORIZONTAL_HEIGHT)) / 2),\r\n                    width: +constants.OUTPUT_HORIZONTAL_WIDTH,\r\n                    height: +constants.OUTPUT_HORIZONTAL_HEIGHT,\r\n                }\r\n            },\r\n            {\r\n                name: 'vertical',\r\n                height: constants.OUTPUT_VERTICAL_HEIGHT,\r\n                width: constants.OUTPUT_VERTICAL_WIDTH,\r\n                src: null,\r\n                initial:false,\r\n                crop: {\r\n                    unit: 'px',\r\n                    width: constants.OUTPUT_VERTICAL_WIDTH,\r\n                    height: constants.OUTPUT_VERTICAL_WIDTH,\r\n                    x: Math.max(0, ((+constants.IMAGE_WIDTH) - (+constants.OUTPUT_VERTICAL_WIDTH)) / 2),\r\n                    y: Math.max(0, ((+constants.IMAGE_HEIGHT) - (+constants.OUTPUT_VERTICAL_HEIGHT)) / 2),   \r\n                }\r\n            }, {\r\n                name: 'horizontal small',\r\n                height: constants.OUTPUT_HORIZONTAL_SMALL_HEIGHT,\r\n                width: constants.OUTPUT_HORIZONTAL_SMALL_WIDTH,\r\n                src: null,\r\n                initial:false,\r\n                crop: {\r\n                    unit: 'px',\r\n                    width: constants.OUTPUT_HORIZONTAL_SMALL_WIDTH,\r\n                    height: constants.OUTPUT_HORIZONTAL_SMALL_HEIGHT,\r\n                    x: Math.max(0, ((+constants.IMAGE_WIDTH) - (+constants.OUTPUT_HORIZONTAL_SMALL_WIDTH)) / 2),\r\n                    y: Math.max(0, ((+constants.IMAGE_HEIGHT) - (+constants.OUTPUT_HORIZONTAL_SMALL_HEIGHT)) / 2),   \r\n                }\r\n            },\r\n            {\r\n                name: 'gallery',\r\n                height: constants.OUTPUT_GALLERY_HEIGHT,\r\n                width: constants.OUTPUT_GALLERY_WIDTH,\r\n                src: null,\r\n                initial:false,\r\n                crop: {\r\n                    unit: 'px',\r\n                    width: constants.OUTPUT_GALLERY_WIDTH,\r\n                    height: constants.OUTPUT_GALLERY_HEIGHT,\r\n                    x: Math.max(0, ((+constants.IMAGE_WIDTH) - (+constants.OUTPUT_GALLERY_WIDTH)) / 2),\r\n                    y: Math.max(0, ((+constants.IMAGE_HEIGHT) - (+constants.OUTPUT_GALLERY_HEIGHT)) / 2),   \r\n                }\r\n            }\r\n        ]\r\n    }\r\n\r\n    \r\n// method to update source\r\n    const updateSrc = (arr, name, src) => {\r\n        let updatedarr = [...arr];\r\n        let index = updatedarr.findIndex(el => el.name === name);\r\n        updatedarr[index]['src'] = src;\r\n        return updatedarr;\r\n    }\r\n\r\n    // method to update crop\r\n    const updateCrop = (arr,name,crop)=>{\r\n        let updatedarr = [...arr];\r\n        let index = updatedarr.findIndex(el => el.name === name);\r\n        updatedarr[index]['crop'] = crop;\r\n        return updatedarr;\r\n    }\r\n\r\n    // method to update initial crop\r\n    const updateInitial = (arr,name,initial)=>{\r\n        let updatedarr = [...arr];\r\n        let index = updatedarr.findIndex(el => el.name === name);\r\n        updatedarr[index]['initial'] = initial;\r\n        return updatedarr;\r\n    }\r\n\r\n\r\n    // reducer of the redux store\r\nexport const rootReducer = (store = initialstore, action) => {\r\n    switch (action.type) {\r\n        case constants.SET_SRC:\r\n            return {\r\n                ...store, src: action.src\r\n            };\r\n        case constants.SET_OUTPUTSRC:\r\n            return {\r\n                ...store, outputimages: updateSrc(initialstore.outputimages, action.name, action.src)\r\n            }\r\n        case constants.SET_CROP:\r\n            return {\r\n                ...store, outputimages: updateCrop(initialstore.outputimages,action.name,action.crop)\r\n            }\r\n        case constants.SET_INITIAL:\r\n            return{\r\n                ...store, outputimages:updateInitial(initialstore.outputimages,action.name,action.initial)\r\n            }\r\n            default:\r\n                return store;\r\n    }\r\n}\r\n\r\n//","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\nimport {createStore,compose} from 'redux';\nimport {Provider} from 'react-redux';\nimport {rootReducer} from './Store/rootReducer';\n\n// used to enable redux dev tools , Also not disabled in production due to testing purposes\nconst  composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\n\nconst store = createStore(rootReducer,composeEnhancers());\n\n\nReactDOM.render(\n  <Provider store={store}>\n  <BrowserRouter>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </BrowserRouter></Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Modal_backdrop__Yh955\",\"active\":\"Modal_active__3cW5c\",\"modal\":\"Modal_modal__3JwwJ\",\"modalHeader\":\"Modal_modalHeader__2kv2h\",\"modalFooter\":\"Modal_modalFooter__31ZrL\",\"modalBody\":\"Modal_modalBody__2wFU4\"};"],"sourceRoot":""}